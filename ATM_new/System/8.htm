<html>
<body background="fon2.bmp" bgproperties=fixed>
<p align=center><font size=6 face="Arial" color=green><b>Методы маршрутизации в коммутаторах АТМ</b></font></p>
<hr>
<font color=black><b>Содержание</b></font>
<font color=blue><b>

<ul>
<li><a href=#mark1>Функции коммутатора</a>
<li><a href=#mark2>Общая архитектура коммутатора</a>
<ul>
  <li><a href=#mark21>входные модули</a>
  <li><a href=#mark22>выходные модули</a>
  <li><a href=#mark23>модуль САС</a>
  <li><a href=#mark24>модуль управления SM</a>
  <li><a href=#mark25>поле коммутации</a>
</ul>
<li><a href=#mark3>Показатели коммутатора</a>
<li><a href=#mark4>Классификация коммутатора</a>
<li><a href=#mark5>Коммутаторы с коллективной памятью</a>
<li><a href=#mark6>Коммутаторы с общей средой</a>
<li><a href=#mark7>Матричные коммутаторы</a>
<li><a href=#mark8>Баньяновидные коммутаторы</a>
</ul>

</font>
<font color=navy>
<hr>

<a  name=mark1><p align=center><b><font color=red size=5><a href='8.htm'>Функции коммутатора</a></b></font></p>

<p align=center><font color=red size=5>Основные функции</p></font>

<p style='text-indent:20'>АТМ-коммутатор располагает множеством входных и выходных портов, обеспечивающих связь с серверами и клиентскими станциями, а также с другими коммутаторами и сетевыми элементами. Он может иметь дополнительные интерфейсы для обмена управляющей информацией со специализированными сетями. Теоретически коммутатор представляет собой интегрированное устройство, предназначенное для передачи ячеек, реализации процедур управления соединениями и администрирования. На практике он выполняет и некоторые функции межсетевого взаимодействия в целях поддержания ряда услуг, таких как коммутируемая мультимегабитная служба передачи данных (Switched Multi-megabit Data Service, SMDS) и служба ретрансляции кадров (frame relay).</p>

<p align=center><font color=red size=5>Плоскость пользователя</p></font>

<p style='text-indent:20'>Основная функция АТМ-коммутатора заключается в передаче ячеек данных со входных портов на выходные. Коммутатор анализирует лишь заголовки ячеек, для их содержимого он является прозрачным. Сразу после поступления ячейки через входной порт осуществляется обработка содержащейся в ней информации об идентификаторах виртуального пути (Virtual Path Identifier, VPI) и виртуального канала (Virtual Channel Identifier, VCI), которая необходима для пересылки ячейки на соответствующий выходной порт. Эта процедура реализуется следующими функциональными блоками:</p>
<ul>
<li>модулем поступления на входной порт;
<li>коммутационным полем (иногда называемым коммутационной матрицей), которое фактически выполняет маршрутизацию внутри коммутатора;
<li>модулем передачи из выходного порта.
</ul>
<p align=center><font color=red size=5>Плоскость управления</p></font>

<p style='text-indent:20'>Этот функциональный компонент обеспечивает установление соединений виртуальных каналов и виртуальных путей (Virtual Path Connection/Virtual Channel Connection, VPC/VCC), а также управление ими. В отличие от ячеек данных, содержимое управляющих ячеек передается непрозрачно. Коммутатор идентифицирует ячейки сигнализации и даже сам генерирует их. Процедура управления установлением соединения (Connection Admission Control, САС) включает в себя основные функции сигнализации. Сигнальная информация передается через сеть сигнализации, например основанную на ОКС 7, либо проходит (хотя может и не иметь этой возможности) через поле коммутации ячеек, а затем попадает в сеть АТМ.</p>

<p align=center><font color=red size=5>Плоскость администрирования</p></font>

<p style='text-indent:20'>Данный компонент осуществляет мониторинг сети, что позволяет обеспечить  устойчивую и эффективную работу. Соответствующие операции могут быть подразделены на функции управления неисправностями, конфигурацией, защитой, учетом ресурсов и графиком, которые реализуются во взаимодействии с плоскостью управления (модулем управляя коммутатором). Плоскость администрирования отвечает за поддержку процедур уровня АТМ, относящихся к эксплуатации и техническому обслуживанию (Operations, Administration and Maintenance, OAM), с чьей помощью идентифицируются и обрабатываются ячейки OAM. Последние проходят (а иногда, подобно сигнальным ячейкам, не проходят) через поле коммутации ячеек.</p>

<p style='text-indent:20'>Кроме того, эта плоскость поддерживает промежуточный интерфейс локального управления (Interim Local Management Interface, ILMI) интерфейса «пользовать – сеть» (User-Network Interface, UNI). Для каждого UNI в ней содержится объект администрирования (UME), который может использовать, например, полярный протокол управления SNMP</p>

<a  name=mark2><p align=center><b><font color=red size=5><a href='8.htm'>Общая архитектура коммутатора</a></b></font></p>

<p style='text-indent:20'>Чтобы упростить описание различных схем работы АТМ-коммутатора, сначала кратко рассмотрим его функциональные блоки (рис. 1) – входные (Input Module, IM) и выходные (Output Module, ОМ) модули, поле коммутации ячеек, модули контроля за установлением соединений (САС) и управления коммутатором (Switch Management, SM). Перечисленные блоки являются услуго-независимыми, а границы между ними иногда оказываются размытыми. Ключевую роль в работе коммутатора играет поле коммутации ячеек, поэтому его детальное описание будет вынесено в самостоятельный раздел.</p>

<p align=center><image src="image0k1.gif"></p>
<p align=center></b>Рисунок 1<b></p>

<a  name=mark21><p align=center><font color=red size=5>Входные модули</p></font>

<p style='text-indent:20'>Прежде всего входной модуль терминирует входящий сигнал (например, SONET) и выделяет поток ячеек АТМ. Этот процесс включает в себя преобразование и восстановление сигнала, обработку заголовка SONET. структурирование ячеек и коррекцию скоростей их передачи. Затем с каждой ячейкой АТМ выполняются следующие операции:</p>
<lu>
<li>проверка заголовка на наличие ошибок с помощью поля управления ошибками заголовка (Header Error Control. НЕС):
<li>подтверждение правильности значений идентификаторов VPI/VCI и их трансляция:
<li>определение выходного порта:
<li>направление сигнальных ячеек в модуль САС. а ячеек OAM – в модуль управления коммутатором;
<li>реализация процедуры UPC/UNC для каждой пары соединений VPC/VCC:
<li>дополнение внутреннего тэга, содержащего сведения о внутренней маршрутизации. и мониторинг информации, предназначенной для использования внутри коммутатора.
</lu>
 

<a  name=mark22><p align=center><font color=red size=5>Выходные модули</p></font>

<p style='text-indent:20'>Эти модули подготавливают потоки ячеек АТМ для физической передачи:</p>

<lu>
<li>обрабатывают и удаляют внутренние тэги ячеек:
<li>при необходимости транслируют значения VPI/VCI:
<li>генерируют поле НЕС, обеспечивая возможность последующей проверки заголовка на наличие ошибок;
<li>при необходимости включают ячейки из модулей САС и управления коммутатором в исходящие потоки ячеек;
<li>корректируют скорости передачи ячеек;
<li>упаковывают ячейки в полезную нагрузку сети физического уровня (SONET) и генерируют соответствующие заголовки;
<li>преобразуют цифровой поток бит в оптический сигнал.
</lu> 

<a  name=mark23><p align=center><font color=red size=5>Модуль САС</p></font>

<p style='text-indent:20'>Данный модуль устанавливает, модифицирует и разрывает соединения виртуальных путей и каналов. Он отвечает за сигнальные протоколы верхних уровней, сигнальные функции уровня адаптации АТМ (АТМ Adaptation Layer, AAL), необходимые для интерпретации или генерации сигнальных ячеек, за поддержание интерфейсов с сетью сигнализации, согласование с пользователями контрактов на обслуживание (Service Level Agreement, SLA) характеристик графика при запросах на установление новых соединений VPC/VCC с другими параметрами качества сервиса (QoS) и изменений для существующих соединений VPC/VCC, за распределение ресурсов коммутатора при организации соединений VPC/VCC (включая выбор маршрутов), принятие решения (в ответ на запрос) о допустимости установления соединений VPC/VCC, а также генерацию параметров процедур UPC/NPC.</p>

<p style='text-indent:20'>Если используется централизованная реализация САС, то единственное устройство (модуль) обработки будет получать сигнальные ячейки от входных модулей, интерпретировать их и выдавать решение о возможности формирования соединения и распределении ресурсов коммутатора между всеми соединениями.</p>

<p style='text-indent:20'>Если же функции САС распределяются по блокам входных модулей, в каждом из них процедура САС использует меньшее, чем в предыдущем случае, число входных портов. Этот алгоритм гораздо сложнее в реализации, однако он снимает проблему недостаточной производительности при обработке заданий управления соединениями в больших коммутаторах путем их распараллеливания. Однако подобное распределение требует передачи значительных объемов информации между устройствами САС, относящимися к разным модулям, и координации их работы.</p>

<p style='text-indent:20'>В некоторых АТМ-коммутаторах, например производства Hitachi и NEC, каждый из входных модулей имеет не только собственную процедуру САС, но и небольшое поле маршрутизации ячеек АТМ. Заметим также, что часть распределенных функций САС может выполняться выходными модулями, инкапсулирующими управляющую информацию верхних уровней в исходящие сигнальные ячейки.</p> 

<a  name=mark24><p align=center><font color=red size=5>Модуль управления коммутатором</p></font>

<p style='text-indent:20'>Этот модуль реализует процедуры физического уровня и уровня ОАМ. Он отвечает за управление конфигурацией компонентов коммутатора и защитой его базы данных, снимает показатели использования ресурсов коммутатора, управляет графиком, информационной базой текущих процедур администрирования и интерфейсом UN1, обеспечивает интерфейс с операционными системами, сетевое управление, обработку отказов и протоколирование учетной информации, относящейся к управлению. Выполнение таких функций невозможно без эффективных внутрикоммутационных связей между модулем управления и другими функциональными блоками.</p>

<p style='text-indent:20'>Централизованное управление коммутатором порой становится «узким местом», если модуль управления перегружен обработкой требований. Чтобы избежать перегрузки, функции данного модуля можно распределять среди входных модулей, которые в этом случае будут контролировать поступающие потоки ячеек данных в целях учета ресурсов и измерения характеристик функционирования коммутатора. В свою очередь, выходные модульные устройства управления способны контролировать выходящие потоки ячеек.</p>

<p style='text-indent:20'>Сложность управления коммутатором обусловлена прежде всего чрезвычайно широким спектром выполняемых им функций, которые к тому же постоянно эволюционируют. В связи с этими обстоятельствами разработка соответствующих международных рекомендаций и стандартов еще далека от своего завершения.</p> 

<a  name=mark25><p align=center><font color=red size=5>Поле коммутации ячеек</p></font>

<p style='text-indent:20'>Поле коммутации отвечает за передачу ячеек данных (а в ряде случаев – сигнальных и управления) между другими функциональными блоками. В его задачи входят также концентрация и мультиплексирование графика, маршрутизация и буферизация ячеек, повышение отказоустойчивости коммутатора, многоадресная и широковещательная передача, распределение ячеек, основанное на приоритетах по задержкам, мониторинг случаев перегрузки и активизация индикатора перегрузки в прямом направлении (Explicit Forward Congestion Indication, EFC1). Многоадресная и широковещательная передача будет рассмотрена во второй части статьи, а сейчас расскажем об остальных функциях в контексте различных схем коммутации.</p>

<a  name=mark3><p align=center><b><font color=red size=5><a href='8.htm'>Основные показатели коммутаторов</a></b></font></p>
<lu>
<li>производительность (отношение суммарной скорости выходящего потока к суммарной скорости входящего);
<li>коэффициент использования (отношение средней скорости входящего потока к максимально возможной скорости выходящего);
<li>вероятность потерь ячеек;
<li>задержки передачи ячеек;
<li>длины очередей;
<li>сложность реализации.
</lu>

<a  name=mark4><p align=center><b><font color=red size=5><a href='8.htm'>Классификация коммутаторов</a></b></font></p>

<p style='text-indent:20'>По принципам построения коммутаторы можно разделить на три типа:</p>

<ol>
  <li>с коллективной памятью;
  <li>с общей магистралью;
  <li>с пространственным разделением
</ol>

<p style='text-indent:20'>Первый тип коммутаторов имеет память, общую для входных и выходных блоков. В таком коммутаторе все управляется централизованно. Для реализации различных вариантов входных очередей общая память может динамически разбиваться на сегменты.</p>

<p style='text-indent:20'>Для второго типа коммутаторов характерно наличие общей магистрали, в которую мультиплексируются все входные потоки. Механизм управления потоком определяет по идентификаторам принадлежность каждой ячейки и демультиплексирует общий поток через адресные шины. Управление таким коммутатором также носит централизованный характер.</p>

<p style='text-indent:20'>Третий тип устанавливает несколько соединений от входных портов к выходным. Управление таким коммутатором осуществляется по портам. </p>

<p style='text-indent:20'>В свою очередь коммутаторы с пространственным разделением делятся на:</p>

<ol>
  <li>матричные;
  <li>баньяновидные;
  <li>с N^2-разделением соединениями.
</ol>

<a  name=mark5><p align=center><b><font color=red size=5><a href='8.htm'>Коммутаторы с коллективной памятью</a></b></font></p>

<p style='text-indent:20'>Высокоскоростные коммутаторы ячеек с коллективной памятью можно считать наиболее естественным типом коммутаторов АТМ из-за большего сходства их принципов построения с традиционными коммутаторами пакетов, используемыми в вычислительных сетях.</p>

<p align=center><image src="image0k2.gif"></p>
<p align=center></b>Рисунок 2<b></p>

<p style='text-indent:20'>На рисунке 2 приведена структура рассматриваемого коммутатора. Входящие ячейки преобразуются из последовательного формата в параллельный и записываются в порт ОЗУ. Используя заголовки ячеек с тэгами маршрутизации, контроллер памяти решает, в каком порядке ячейки будут считываться из нее. Выходящие ячейки демультиплексируются при передаче на выходные порты и преобразуются из параллельного формата в последовательный.</p>

<p style='text-indent:20'>Все входные и выходные контроллеры непосредственно соединены с общим запоминающим устройством, доступным для записи со всех входных контроллеров и чтения для всех выходных контроллеров. В рассматриваемом варианте архитектуры коммутатора АТМ должны быть удовлетворены два основных конструктивных требования.</p>

<p style='text-indent:20'>Во-первых, время, необходимое процессору для того, чтобы определить, в какую очередь поставить поступивший пакет и выработать соответствующие управляющие сигналы, должно быть достаточно мало, чтобы процессор успевал справляться с потоком поступающих пакетов. Следовательно, в системе должен быть центральный контроллер, способный в течение каждого временного цикла обрабатывать последовательно N входных пакетов и выбирать N пакетов для дальнейшей передачи. Во-вторых, самое важное требование относится к коллективной памяти. Скорость записи/считывания должна быть достаточно велика, чтобы можно было обслужить одновременно весь входной и выходной трафик. Если число портов равно N, а скорость обмена через порт равна V, то скорость записи/считывания должна составлять 2NV. Так, для 32-х канального коммутатора с канальной скоростью 150 Мбит/с скорость запись/считывание должна составлять, по крайней мере, 9,6 Гбит/с.</p>

<p style='text-indent:20'>В коммутаторе с коллективной памятью требуемый объем памяти определяется не только количеством портов N, поступающей нагрузкой, моделью трафика, но и способом коллективного использования памяти различными выходными очередями. Так, в одном случае память может быть разбита на N различных секций, каждая из которых предназначена для отдельной очереди (полное разбиение памяти). А в другом крайнем случае может быть организовано полностью совместное использование памяти, при котором все очереди могут формироваться в любой области памяти, и пакет будет потерян лишь тогда, когда заполнена вся память. Естественно, совместное использование ведет к минимизации объема памяти.</p>


<a  name=mark6><p align=center><b><font color=red size=5><a href='8.htm'>Коммутаторы с общей средой</a></b></font></p>

<p style='text-indent:20'>В коммутаторах с общей средой все пакеты, поступающие по входным каналам, синхронно мультиплексируются в общую среду с высокой скоростью передачи, в качестве которой может выступать общая шина с разделением по времени (рисунок 3) или кольцо.</p>

<p align=center><image src="image0k3.gif"></p>
<p align=center></b>Рисунок 3<b></p>

<p style='text-indent:20'>Если в качестве общей среды выступает параллельная шина, то ее полоса пропускания должна быть в N раз больше, чем скорость передачи по одному входному каналу. Каждый выходной канал присоединен к шине через интерфейс, состоящий из адресного фильтра (АФ) и выходного буфера, организованного по принципу "первым пришел - первым вышел" (FIFO).</p>

<p style='text-indent:20'>Такой интерфейс в состоянии принять все пакеты, передаваемые по шине. В зависимости от значений идентификатора виртуального пути и виртуального канала, содержащихся в заголовке ячейки, адресный фильтр в каждом интерфейсе определяет, следует ли записывать ячейку в буфер данного выхода или нет. Таким образом, подобно коммутаторам с коллективной памятью коммутаторы с общей средой основаны на мультиплексировании всех поступающих пакетов в один поток и с последующим демультиплексированием общего потока на отдельные потоки по одному на каждый выход. Все пакеты проходят по единому пути - широковещательной шине с временным разделением, а демультиплексирование осуществляется адресными фильтрами в выходных интерфейсах.</p>

<p style='text-indent:20'>Отличие коммутатора с общей средой от коммутатора с коллективной памятью заключается в том, что в данном типе архитектуре осуществляется полностью раздельное использование памяти выходными очередями, так что последние могут быть организованы по принципу "первым пришел - первым обслужен".</p>

<a  name=mark7><p align=center><b><font color=red size=5><a href='8.htm'>Матричные коммутаторы 
или метод полносвязанной топологии.</a></b></font></p>

<p style='text-indent:20'>В основе коммутационной структуры координатного (матричного) типа (рисунок 29) лежит квадратный массив из N^2 ключей (переключателей, шлюзов), по одному на каждую пару "вход-выход". Замыкание ключа, находящегося в точке переключения, образует физическое соединение i-ro входа с j-м выходом.</p>

<p align=center><image src="image0k4.gif"></p>
<p align=center></b>Рисунок 4<b></p>

<p style='text-indent:20'>Каждый ключ может находиться в двух состояниях:</p>

<ul>
<li>сквозном (при котором горизонтальный вход соединяется с горизонтальным выходом, а вертикальный вход - с вертикальным выходом); 
<li>перекрестном (при котором горизонтальный вход соединен с вертикальным выходом, а вертикальный вход - с горизонтальным выходом). 
</ul>

<p style='text-indent:20'>Преимущества рассматриваемого типа коммутации заключаются в том, что буферизация ячеек происходит на выходных портах и (как в методе с общей средой) отсутствуют ограничения на групповую и широковещательную передачу. Реализация адресных фильтров и выходных буферов достаточно проста: нужно лишь обеспечить требуемую скорость обмена через порт. Метод полносвязной топологии допускает простое масштабирование в широких пределах и позволяет достичь высокой скорости функционирования коммутатора, поскольку все его аппаратные модули работают с одной и той же скоростью.</p>

<p style='text-indent:20'>В данном коммутаторе используется коммутация с самомаршрутизацией.</p>

<a  name=mark8><p align=center><b><font color=red size=5><a href='8.htm'>Коммутаторы баньяновидного типа.</a></b></font></p>

<p style='text-indent:20'>Коммутационной структуре матричного типа требуется N2 ключей, что усложняет работу такой коммутационной структуры при увеличении N (свыше двух десятков). Для уменьшения количества переключателей в узлах коммутационной матрицы были разработаны коммутаторы с баньяновидной (многокаскадной) структурой. </p>

<p align=center><image src="image0k5.gif"></p>
<p align=center></b>Рисунок 5<b></p>

<p align=center><image src="image0k6.gif"></p>
<p align=center></b>Рисунок 6<b></p>

<p align=center><image src="image0k7.gif"></p>
<p align=center></b>Рисунок 7<b></p>

<p style='text-indent:20'>Для частичного предотвращения внутренних блокировок и повышения пропускной способности в баньяновидной структуре используют буферизацию. При этом буферная память размещается на входе коммутатора. Буферная память способна разрешать конфликты, возникающие в том случае, если входные потоки задействуют практически все переключатели в коммутационной структуре. Если же длительное время задействуется некоторое небольшое число переключателей, то буферная память не способна нейтрализовать конфликт. В этом случае может произойти потеря ячеек.</p>

<p style='text-indent:20'>Существует способ равномерного распределения трафика по всем переключателям. Для этого перед коммутационной структурой ставится специальное устройство – распределитель, который разделяет входной поток по разным входам основной коммутационной структуры. Такую схему называют коммутационной структурой Бэтчера (рисунок 8).</p>

<p align=center><image src="image0k8.gif"></p>
<p align=center></b>Рисунок 8<b></p>

<p style='text-indent:20'>Коммутатор Бэтчера также состоит из переключателей. При поступлении двух ячеек на один из переключателей, он сравнивает их адреса. Ячейка с большим номером направляется по стрелке. Ячейка с меньшим номером – в противоположном направлении. Если поступает одна ячейка, то она передается в направлении, противоположном направлению стрелки. На выходе коммутатора Бэтчера ячейки распределяются соответствующим образом и передаются на коммутатор типа баньяна.</p>

<p style='text-indent:20'>Буферы могут быть установлены на входе сети Бэтчера, однако в этом случае возможна блокировка очереди ячейкой, находящейся в ее начале и направляемой на занятый выходной порт, даже если выходные порты ячеек, расположенных позади данной, свободны. В такой ситуации способна выручить дисциплина «пришедший первым обслуживается в случайном порядке» (First In Random Out, FIRO), но, к сожалению, она не имеет простой реализации.</p>

<p style='text-indent:20'>Другой способ избежать конфликтов маршрутов – установить буфер непосредственно внутри коммутационных элементов баньяновидной сети. Если две ячейки одновременно направляются в один и тот же выходной канал, одна из них буферизуется внутри коммутационного элемента. Внутренняя буферизация используется и механизмом управления с помощью обратной блокировки (backpressure): очереди в одном каскаде сети задерживают ячейки предыдущего каскада сигналом обратной связи. Влияние процедуры обратной блокировки может достигнуть первого каскада и привести к созданию очередей на входах. Следует отметить, что внутренняя буферизация способна вызвать блокировку ячейки в начале очереди на каждом коммутационном элементе и, следовательно, не позволяет достичь максимальной производительности.</p>

<p align=center><image src="image012.gif"></p>
<p align=center></b>Рисунок 9<b></p>

<p style='text-indent:20'>Еще один вариант – использование рециркуляционного буфера, внешнего коммутационному полю.</p>

<p align=center><image src="image014.gif"></p>
<p align=center></b>Рисунок 10<b></p>

<p style='text-indent:20'>Этот подход применяется в широкополосных цифровых коммутаторах Sunshine фирмы Bellсоге и Starlite компании AT&T. В данном случае конфликты на выходе обнаруживаются после прохождения сортировщика Бэтчера, затем сеть выбирает ячейку для дальнейшей передачи, а оставшиеся ячейки через рециркуляционный буфер возвращаются на входные порты сети Бэтчера. К сожалению, данный метод требует сложного приоритетного управления для сохранения исходной последовательности передаваемых ячеек и применения сети Бэтчера большего размера для размещения рециркулированных ячеек.</p>

<p align=right><a href='8.htm'>Перейти в начало</a></p>
</b>
</font>
</body>
</html>