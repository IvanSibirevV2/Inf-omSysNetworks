<html>
<body background="fon2.bmp" bgproperties=fixed>
<p align=center><font size=6 face="Arial" color=green><b>Методы маршрутизации в коммутаторах АТМ</b></font></p>
<hr>
<font color=black><b>Содержание</b></font>
<font color=blue><b>
<ul>
<li><a href  =#mark1>Общие сведения</a>
<li><a href  =#mark2>Маршрутиризация АТМ</a>
<li><a href  =#mark3>Временное хранение ячеек</a>
<ul>
  <li><a href  =#mark4> Организация очередей на входе</a>
  <li><a href  =#mark5> Организация очередей на выходе</a>
  <li><a href  =#mark6> Внутренняя буферизация</a>
  <li><a href  =#mark7> Применение рециркуляционных буферов</a>
</ul>
</ul>
</font>
<font color=navy>
<hr>

<a  name=mark1><p align=center><b><font color=red size=5><a href='3.htm'>Общие сведения</a></b></font></p>

<p style='text-indent:20'>Коммутационное устройство ATM, наряду с анализом и модификацией заголовка (новые значения VPI/VCI), выполняет две главные функции (рисунок 21):</p>
<ol>
<li>маршрутизацию ячеек к соответствующим выходным портам;
<li>временное хранение ячеек.
</ol>

<p style='text-indent:20'>Коммутационное устройство должно также управлять несколькими параллельными потоками ячеек, различающимися приоритетами, и в первую очередь обрабатывать ячейки с более высоким приоритетом (например, путем создания очередей для каждого приоритета).</p>

<p align=center><image src="image002.gif"></p>
<p align=center></b>Рисунок 1<b></p>

<p style='text-indent:20'>Некоторые виды обслуживания системы ATM требуют вещательной передачи ячеек, поступающих от одного и того же источника вещания, ко всем пунктам назначения, т.е. многоадресной передачи заданному набору пунктов назначения. Конечно, сам источник мог бы создать некоторое количество копии каждой подлежащей вещательной передаче ячейки, но тогда эти копии маршрутизировались бы как множество независимых потоков, что привело бы к излишним затратам ширины полосы пропускании и к необходимости иметь в источнике полный перечень адресов пунктов назначения.</p>

<p style='text-indent:20'>Более эффективным способом является сдвиг места тиражирования ячеек как можно дальше. Используя специальную часть информации (вещательный адрес), коммутационное устройство ATM должно уметь размножать некоторые ячейки для их передачи в несколько выходных портов.</p>

<p style='text-indent:20'>Как схематически изображено на рисунке 1, заголовок обычно обрабатывается во входных адаптерах коммутационного устройства, которые ответственны за извлечение из входных звеньев потока правильно поступивших ячеек. Маршрутизация выполняется коммутационной структурой. Временное хранение ячеек обычно производится в выходных и/или входных адаптерах, но может быть сосредоточено и в коммутационной структуре.</p>

<a name=mark2><p align=center><font color=purple size=5><i><a href='3.htm'>Маршрутизация ячеек</a></i></font></p>

<p style='text-indent:20'>Обычно соединение между входным и выходным портом, которое определяет маршрут через коммутационную структуру, должно быть предварительно известно и храниться в таблице соединений. Эта информация может использоваться в качестве маркера, который устанавливает определенный путь для передачи ячеек, относящихся к данному соединению (<font color=red>непрямая маршрутизация</font>), или в качестве метки, которая добавляется к передаваемым ячейкам, давая им возможность направлять самих себя к соответствующему выходному порту (<font color=red>самомаршрутизация</font>).</p>

<p style='text-indent:20'>Поскольку услуги ATM ориентированы на соединения, обычный режим маршрутизации является непрямым: 
<ul>
<li>заголовок каждой ячейки содержит указатель (VP1/VCI), содержимое которого идентифицирует соединение и который имеет только локальное значение.
<li>Путь, соответствующий такому соединению, должен быть в явном виде записан в каждом коммутационном компоненте до начала передачи какой-либо информации. 
<li>Далее ячейки направляются к соответствующему выходному порту с учетом содержимого таблицы: каждому значению VPI/VCI соответствует выходной порт и новое значение указателя (рисунок 2).
</ul>
<p style='text-indent:20'>Эта таблица может быть очень большой, поскольку каждое соединение идентифицируется 24 или 28 битами заголовка ячейки.

<p align=center><image src="image003.gif"></p>
<p align=center></b>Рисунок 2<b></p>

<p style='text-indent:20'>Один из вариантов реализации такой маршрутизации состоит в использовании самомаршрутизации и требует дополнительных затрат: на входе каждого коммутационного блока (в особенности, если он состоит из нескольких коммутационных компонентов) к каждой ячейке добавляются дополнительные метки маршрутизации. Они описывают физические маршруты ячеек и представляются в виде перечня коммутационных элементов, через которые должны пройти ячейки, и выходных портов, которые они должны использовать (рисунок 3).

<p align=center><image src="image004.gif"></p>
<p align=center></b>Рисунок 3<b></p>

<p style='text-indent:20'>Все ячейки, относящиеся к данному соединению, следуют одним и тем же маршрутом и выдаются в приемник по порядку. Они не маркируются коммутационными элементами, поскольку маршрут явно записан в каждой метке. Использованная информация удаляется из содержимого метки (иногда называемой "расходном меткой"), как только ячейка проходит через коммутационное устройство (вместо удаления части метки можно модифицировать указатель на оставшуюся полезную часть).

<a name=mark3><p align=center><font color=purple size=5><i><a href='3.htm'>Временное хранение ячеек</a></i></font></p>

<p style='text-indent:20'>В некоторых коммутационных структурах существует риск внутренней блокировки, потому что не всегда можно установить путь между входным портом и необходимым выходным портом. Естественно поэтому считать, что для исключения непрямых коэффициентов потерь ячеек следует на входах или внутри коммутационного устройства иметь накопители для организаций очередей.

<p style='text-indent:20'>Однако даже при использовании неблокирующихся коммутационных структур ячейки все же должны временно храниться в коммутационном устройстве до разрешения конфликтов па выходах. На практике из-за статистического характера входного трафика несколько ячеек, принимаемых на разные входные порты, могут конкурировать за одновременный доступ к одному и тому же выходному порту.

<p style='text-indent:20'>Существуют два классических подхода к размещению очередей: на входе или на выходе коммутатора. Есть и другие подходы, но значительная часть их может рассматриваться как варианты или комбинации первых двух. Предположим, что:
</p>
<lu>
<li>рассматривается коммутационный блок типа NxN (N входных портов и N выходных портов, работающих с одинаковыми скоростями);
<li>потоки входных нагрузок являются независимыми и статистически идентичными; они однородны и каждая ячейка с вероятностью 1/N имеет выход к своему пункту назначения.
</lu>

<a  name=mark4><p align=center><font color=purple size=5><i><a href='3.htm'>Организация очередей на входе</a></i></font></p>

<p style='text-indent:20'>Очередь с дисциплиной <font color=purple></b><i>FIFO<b></i></font> (First In First Out -первый пришел, первый обслужен) связана с каждым входным портом. Конфликт обнаруживается, если j ячеек (j < N), находящихся во главе j очередей, доставляются к одному и тому же выходу. Такой подход представляется достаточно естественным, поскольку при этом конфликт обнаруживается до коммутационной структуры и она обслуживает только те ячейки, которые могут достичь своего порта назначения (рисунок 4). Однако при этом блокируются все последующие ячейки, находящиеся в (j – 1) необслуживаемых очередях, даже если их порты назначения в это время свободны.

<p style='text-indent:20'>Этот эффект блокировки, создаваемой первой ячейкой в линии, который называется <font color=purple></b><i>HOL<b></i></font> (Head of Line blocking), ухудшает характеристики систем с входными очередями. Если N велико, то нагрузка, обрабатываемая коммутационной структурой, не может превышать величины 2-2^(1/2), т. е. примерно 0,58, что хуже, чем при любом алгоритме выборки из очереди (случайном, циклическом ...) при отсутствии приоритетов (заметим, что при N=4 максимальная нагрузка уже ограничивается 0,65).

<p align=center><image src="image008.gif"></p>
<p align=center></b>Рисунок 4<b></p>

<p style='text-indent:20'>Способ организации очередей на входе менее приспособлен к функциям вещания из-за отсутствия выходных очередей. Кроме того, он очень чувствителен по отношению к неоднородному входному трафику. Однако способ имеет преимущество в простоте и в том, что не требует, чтобы быстродействие коммутационной структуры превышало скорость доступа.

<p style='text-indent:20'>Улучшить характеристики можно за счет усложнения коммутационных устройств, например, путем повышения их быстродействия. Другое усовершенствование состоит в сортировке ячеек на входе в соответствии с их портами назначения, что означает организацию N управляемых очередей к входному порту (по одной на каждый выходной порт).


<a  name=mark5><p align=center><font color=purple size=5><i><a href='3.htm'>Организация очередей на выходе</a></i></font></p>

<p style='text-indent:20'>При таком подходе существует очередь с дисциплиной обслуживания FIFO на каждом выходном порте (рисунок 5). Все ячейки, присутствующие в данное время на входных портах, в одно и то же время проходят через коммутационную структуру и затем запоминаются. Так как они все могут иметь один и тот же порт назначения, то очередь, связанная с выходным портом, должна иметь возможность хранить N ячеек.

<p align=center><image src="image010.gif"></p>
<p align=center></b>Рисунок 5<b></p>

<p style='text-indent:20'>Если внутреннее быстродействие коммутационной структуры в N раз больше скорости портов, то может использоваться ускоренная выборка из очереди традиционного типа, а при высокой степени параллелизма будет возможно накопление ячеек в многопортовых очередях без предъявления к коммутационной структуре требований, чтобы ее быстродействие было выше скорости доступа. В этих обоих случаях если очереди имеют неограниченный размер, то оптимальным является использование коммутационной структуры, а необходимости во входных очередях нет, потому что блокировок быть не может. Данный метод пригоден для реализации функций вешания и не очень чувствителен к неоднородному входному трафику. Однако его реализация чрезвычайно сложна.

<a  name=mark6><p align=center><font color=purple size=5><i><a href='3.htm'>Внутренняя организация очереди</a></i></font></p>

<p style='text-indent:20'>Структуры с пространственным разделением допускают установку буферов внутри коммутационных сегментов. Например, в баньяновидной сети коммутационные элементы могут содержать буферы своих входных портах. Однако такое решение чревато возникновением блокировки в начале очереди, что приводит к значительному снижению производительности, особенно в случае небольших буферов или крупных сетей. Использование внутренних буферов становится причиной нежелательных случайных задержек при прохождении ячейками структуры коммутатора. 

<p align=center><image src="image012.gif"></p>
<p align=center></b>Рисунок 6<b></p>

<a  name=mark7><p align=center><font color=purple size=5><i><a href='3.htm'>Применение рециркуляционных буферов</a></i></font></p>

<p style='text-indent:20'>Этот подход позволяет ячейкам повторно подходить по сети с пространственным разделением, когда несколько одновременно адресуются на тот же выходной порт, причем и блокируемые ячейки направляются на входные порты сети через рециркуляционнные буферы. Хотя данный вариант обладает серьезным потенциалом для достижения оптимальной производительности и уменьшения задержек при организации выходных очередей, при его практической реализации нужно учитывать следующее.

<p style='text-indent:20'>Во-первых, емкость коммутационного поля должна быть достаточной для размещения рециркулируемых ячеек. Во-вторых, необходимость сохранить исходную последовательность ячеек, проходящих через коммутатор, значительно усложняет управление коммутацией.

<p align=center><image src="image014.gif"></p>
<p align=center></b>Рисунок 7<b></p>

<p align=center><font color=purple size=5><i><a href='3.htm'>Разделение буферов</a></i></font></p>

<p style='text-indent:20'>Число и размер буферов имеют важное значение при разработке коммутатора.

<p style='text-indent:20'>В устройствах с общей памятью централизованный буфер зачастую имеет преимущество перед средствами статистического разделения. Принимая интенсивный поток ячеек на некоторый выходной порт, коммутатор выделяет для них максимально возможную часть буферного пространства, что приводит к экономии последнего, поскольку ячейки поступают на различные порты случайным образом.

<p style='text-indent:20'>Для коммутационного поля с TDM-шиной и N выходными буферами большая группа ячеек, одновременно поступивших на какой-либо выход, естественно, не может быть принята другим выходным буфером. Тем не менее каждый выходной буфер способен статистически мультиплексировать трафик с N входов.

<p style='text-indent:20'>В структурах с N^2 выходными буферами, имеющих полносвязную топологию, статистическое мультиплексирование между выходными портами или на любом выходном порте невозможно. В этом случае размер буферного пространства растет экспоненциально.

<p style='text-indent:20'>Хорошо известны пять схем разделения буферной памяти. Первая, <font color=red>схема полного разделения </font>(Complete Partitioning, СР), предполагает фиксированное разделение суммарной емкости буферного пространства (которое может объединять физически разные буферы) между ячейками, направляемыми на разные выходы. Ее антиподом является <font color=red>полнодоступная схема</font> (Complete Sharing. CS): поступающая ячейка буферизуется при наличии свободного места в обшей памяти. независимо от того. на какой выход она адресуется.<font color=red> Полнодоступная схема с индивидуальными ограничениями на длины выходных очередей</font>, называемыми потолками (Sharing with Maximum Queue lengths. SMQ), является развитием предыдущей. В данном случае при наличии общей полнодоступной буферной памяти вводятся фиксированные максимальные значения количества буферизуемых ячеек, направляемых на разные выходы, т.е. число ячеек каждого типа не может превышать заданного значения (потолка).<font color=red> Неполнодоступная схема</font> (Sharing with a Minimum Allocation. SMA) представляет собой симбиоз СР и CS, поскольку предполагает наличие как общей буферной памяти (CS). так и ее выделенных частей для ячеек каждого типа (СР). Последний вариант – <font color=red>неполнодоступная схема</font> с индивидуальными потолками (Sharing with Maximum Queue and Minimum Allocation, SMQMA) – отличается от предыдущей введением индивидуальных ограничении в общей части буферной памяти.

<p align=right><a href='3.htm'>Перейти в начало</a></p>
</b>
</font>
</body>
</html>